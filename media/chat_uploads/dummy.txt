import json
import tempfile
from django.core.files.uploadedfile import SimpleUploadedFile
import pytest
from django.test import TestCase
from django.urls import reverse
from django.contrib.auth import get_user_model
from django.contrib.auth.models import AnonymousUser
from channels.testing import WebsocketCommunicator
from chat.models import ChatRoom, Message, UnreadMessage
from chat.consumers import ChatConsumer
from events.models import Event, VolunteerEvent

User = get_user_model()

class ChatTests(TestCase):
    @classmethod
    def setUpTestData(cls):
        dummy_image = SimpleUploadedFile("profile.jpg", b"filecontent", content_type="image/jpeg")

        cls.organisation = User.objects.create_user(
            username="org1",
            password="testpass123",
            user_type="organisation",
            profile_picture=dummy_image
        )
        cls.volunteer = User.objects.create_user(
            username="volunteer1",
            password="testpass123",
            user_type="volunteer",
            profile_picture=dummy_image
        )
        cls.event = Event.objects.create(
            organisation=cls.organisation,
            name="Test Event",
            description="Testing event",
            date="2025-01-01",
            location="Test Location",
            volunteers_needed=5,
            roles_responsibilities="Help out",
            category="environment"
        )
        VolunteerEvent.objects.create(event=cls.event, volunteer=cls.volunteer)
        cls.chatroom = ChatRoom.objects.create(event=cls.event)

    def setUp(self):
        self.client.login(username="volunteer1", password="testpass123")

    def test_chatroom_access(self):
        response = self.client.get(reverse("chat:chat_room", args=[self.event.id]))
        self.assertEqual(response.status_code, 200)

    def test_send_message_view(self):
        response = self.client.post(
            reverse("chat:send_message", args=[self.event.id]),
            data={"content": "Hello"}
        )
        self.assertEqual(response.status_code, 200)
        self.assertTrue(Message.objects.filter(content="Hello").exists())

    def test_fetch_messages(self):
        Message.objects.create(chatroom=self.chatroom, sender=self.volunteer, content="Test")
        response = self.client.get(reverse("chat:chat_room", args=[self.event.id]))
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, "Test")

    def test_unauthenticated_chatroom_redirect(self):
        self.client.logout()
        response = self.client.get(reverse("chat:chat_room", args=[self.event.id]))
        self.assertEqual(response.status_code, 302)

    def test_file_upload_in_chat(self):
        file = SimpleUploadedFile("testfile.txt", b"Test file content", content_type="text/plain")
        response = self.client.post(
            reverse("chat:send_message", args=[self.event.id]),
            data={"file": file}
        )
        self.assertEqual(response.status_code, 200)
        self.assertIn("file_url", response.json())
        self.assertTrue(Message.objects.filter(file__isnull=False).exists())

    def test_unread_message_counter_logic(self):
        other_user = User.objects.create_user(username="vol2", password="pass", user_type="volunteer")
        VolunteerEvent.objects.create(event=self.event, volunteer=other_user)

        self.client.post(reverse("chat:send_message", args=[self.event.id]), data={"content": "Hi"})

        unread_for_other = UnreadMessage.objects.filter(user=other_user).count()
        unread_for_sender = UnreadMessage.objects.filter(user=self.volunteer).count()

        self.assertGreater(unread_for_other, 0)
        self.assertEqual(unread_for_sender, 0)

    def test_get_online_users_view(self):
        response = self.client.get(reverse("chat:get_online_users", args=[self.event.id]))
        self.assertEqual(response.status_code, 200)
        self.assertIn("count", response.json())

    @pytest.mark.asyncio
    async def test_websocket_connection_authenticated(self):
        communicator = WebsocketCommunicator(
            ChatConsumer.as_asgi(),
            f"/ws/chat/{self.event.id}/"
        )
        communicator.scope["user"] = self.volunteer
        communicator.scope["url_route"] = {"kwargs": {"event_id": str(self.event.id)}}
        communicator.scope["headers"] = []

        connected, _ = await communicator.connect()
        assert connected
        await communicator.disconnect()

    @pytest.mark.asyncio
    async def test_websocket_send_receive(self):
        communicator = WebsocketCommunicator(
            ChatConsumer.as_asgi(),
            f"/ws/chat/{self.event.id}/"
        )
        communicator.scope["user"] = self.volunteer
        communicator.scope["url_route"] = {"kwargs": {"event_id": str(self.event.id)}}
        communicator.scope["headers"] = []

        connected, _ = await communicator.connect()
        assert connected

        await communicator.send_json_to({"message": "Hello WebSocket!"})
        response = await communicator.receive_json_from()

        assert response["message"] == "Hello WebSocket!"
        assert response["sender"] == "volunteer1"

        await communicator.disconnect()

    @pytest.mark.asyncio
    async def test_websocket_rejects_unauthenticated(self):
        communicator = WebsocketCommunicator(
            ChatConsumer.as_asgi(),
            f"/ws/chat/{self.event.id}/"
        )
        communicator.scope["user"] = AnonymousUser()
        communicator.scope["url_route"] = {"kwargs": {"event_id": str(self.event.id)}}
        communicator.scope["headers"] = []

        connected, _ = await communicator.connect()
        assert not connected



    def test_file_upload_message(self):
        self.client.login(username="volunteer1", password="testpass123")
        chatroom = ChatRoom.objects.get(event=self.event)

        with open(__file__, "rb") as dummy_file:
            response = self.client.post(reverse("chat:send_message", args=[chatroom.event.id]), {
                "file": SimpleUploadedFile("dummy.txt", dummy_file.read(), content_type="text/plain"),
            })

        self.assertEqual(response.status_code, 200)
        self.assertTrue(Message.objects.filter(file__icontains="dummy.txt").exists())
